// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Vintage Store Database Schema
// This schema defines our data models for the vintage designer store

generator client {
  provider = "prisma-client-py"
  enable_experimental_decimal = true
  recursive_type_depth = -1
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for customer accounts
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  firstName String
  lastName  String
  password  String   // We'll hash this in the application
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  orders Order[]

  @@map("users")
}

// Product model for vintage items
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2) // 10 digits total, 2 decimal places
  category    String
  images      String[] // Array of image URLs
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  orderItems OrderItem[]

  @@map("products")
}

// Order model for customer purchases
model Order {
  id            Int      @id @default(autoincrement())
  userId        Int
  totalAmount   Decimal  @db.Decimal(10, 2)
  status        OrderStatus @default(PENDING)
  shippingAddress Json? // Store as JSON for flexibility
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]

  @@map("orders")
}

// OrderItem model for individual items in an order
model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2) // Price at time of purchase

  // Relationships
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Enum for order status
enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}